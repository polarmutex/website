---
import { getCollection } from 'astro:content';

import { SITE_TITLE, POST_CATEGORIES } from '@config';
import Layout from '@layouts/Layout.astro';
import MostPopular from '@components/MostPopular.svelte';

const posts = await getCollection('posts');
let selectedCategories: any = null;
---

<Layout>
    <!--<svelte:window on:keyup={focusSearch} />-->
    <section class="mx-auto mb-16 flex max-w-2xl flex-col items-start justify-center px-4 sm:px-8">
        <h1 class="mb-4 text-3xl font-bold tracking-tight text-black dark:text-white md:text-5xl">
            {SITE_TITLE} Blog
        </h1>
        <p class="mb-4 text-gray-600 dark:text-gray-400">
            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Laborum sunt reprehenderit
            alias rerum dolor impedit. In total, I've written {posts.length} articles on my blog. Use
            the search below to filter by title.
        </p>
        <div class="relative mb-4 w-full">
        <input
            id="searchBox"
            aria-label="Search posts"
            type="text"
            placeholder="Hit / to search"
            class="block w-full rounded-md border border-gray-200 bg-white px-4 py-2 text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-900 dark:bg-gray-800 dark:text-gray-100"
        />
        <svg
            class="absolute right-3 top-3 h-5 w-5 text-gray-400 dark:text-gray-300"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            ><path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg
        >
        </div>
    {
            POST_CATEGORIES.length > 0 && (
                <>
                    <div class="mt-2 mb-8 flex items-center">
                        <div class="mr-2 text-gray-900 dark:text-gray-400">Filter:</div>
                        <div class="grid grid-cols-2 rounded-md shadow-sm sm:grid-cols-2">
                            {POST_CATEGORIES.map((availableCategory) => (
                                <div>
                                    <input
                                        id=`category-${availableCategory}`
                                        class="peer sr-only"
                                        type="checkbox"
                                        value={availableCategory}
                                    />
                                    <label
                                        for=`category-${availableCategory}`
                                        class="inline-flex w-full cursor-pointer items-center justify-between border border-gray-200 bg-white px-4 py-2 text-gray-500 hover:bg-gray-100 hover:text-gray-600 peer-checked:border-purple-600 peer-checked:text-purple-600 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-gray-300 dark:peer-checked:text-purple-500"
                                    >
                                        {availableCategory}
                                    </label>
                                </div>
                            ))}
                        </div>
                    </div>
                </>
            )
        }

    <!-- you can hardcode yourmost popular posts or pinned post here if you wish -->
    {
        !selectedCategories?.length && (
            <>
                <MostPopular />
                <h3 class="mt-8 mb-4 text-2xl font-bold tracking-tight text-black dark:text-white md:text-4xl">
                    All Posts
                </h3>
            </>
        )
    }

     <div id="results">
     </div>
    </section>
</Layout>

<script>
    import { getCollection } from 'astro:content';

    const posts = await getCollection('posts');
    const inputBox = document.querySelector<HTMLInputElement>('#searchBox');
    const urlSearchParams = new URLSearchParams(window.location.search);
    const params = Object.fromEntries(urlSearchParams.entries());
    console.log('params', params);

    inputBox?.addEventListener('input', () => {
    const filter = inputBox.value;

    // Update search string in URL
    if (filter.length > 0) {
      const searchParams = new URLSearchParams(window.location.search);
      searchParams.set("filter", filter);
      const newRelativePathQuery =
        window.location.pathname + "?" + searchParams.toString();
      history.pushState(null, "", newRelativePathQuery);
    } else {
      history.pushState(null, "", window.location.pathname);
    }
    })
</script>
